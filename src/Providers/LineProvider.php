<?php
/**
 * Created by PhpStorm.
 * User: ezreal
 * Date: 2019/9/2
 * Time: 14:02
 */

namespace Ezreal\Socialite\Providers;

use Ezreal\Socialite\AccessTokenInterface;
use Ezreal\Socialite\ProviderInterface;
use Ezreal\Socialite\User;

/**
 * Class LineProvider.
 *
 * @see https://developers.line.biz/en/docs/line-login/web/integrate-line-login/ [Authenticating with OAuth 2.0]
 */
class LineProvider extends AbstractProvider implements ProviderInterface
{
    /**
     * The scopes being requested.
     *
     * @var array
     */
    protected $scopes = ['profile', 'openid', 'email'];

    /** @var string 版本 */
    protected $version = 'v2.1';

    /** @var string  分割符是空格 */
    protected $scopeSeparator = ' ';

    /** @var string $idToken 获取用户信息的 */
    protected $idToken = '';


    /**
     * {@inheritdoc}
     */
    protected function getAuthUrl($state)
    {
        return $this->buildAuthUrlFromBase("https://access.line.me/oauth2/{$this->version}/authorize", $state);
    }

    /**
     * {@inheritdoc}
     */

    protected function getTokenUrl()
    {
        return "https://api.line.me/oauth2/{$this->version}/token";
    }

    /**
     * @param string $code
     * @return AccessTokenInterface
     */
    public function getAccessToken($code)
    {
        $response = $this->getHttpClient()->post($this->getTokenUrl(), [
            'form_params' => $this->getTokenFields($code),
            'headers' => [
                'Content-Type' => 'application/x-www-form-urlencoded'
            ]
        ]);
        return $this->parseAccessToken($response->getBody());
    }

    /**
     * @param array|\Psr\Http\Message\StreamInterface $body
     * @return AccessTokenInterface
     */
    protected function parseAccessToken($body)
    {
        if (!is_array($body)) {
            $body = json_decode($body, true);
        }

        if (isset($body['id_token'])) {
            $this->idToken = $body['id_token'];
        }
        return parent::parseAccessToken($body); // TODO: Change the autogenerated stub
    }

    /**
     * @param string $code
     * @return array
     */
    protected function getTokenFields($code)
    {
        return parent::getTokenFields($code) + ['grant_type' => 'authorization_code'];
    }

    /**
     * 获取授权码接口参数.
     *
     * @param null $state
     * @return array
     */
    public function getCodeFields($state = null)
    {
        $fields = [
            'client_id' => $this->clientId,
            'redirect_uri' => $this->redirectUrl,
            'scope' => $this->formatScopes($this->scopes, $this->scopeSeparator),
            'response_type' => 'code',
        ];

        if ($this->usesState()) {
            $fields['state'] = $state;
        }

        return $fields;
    }

    /**
     * @param AccessTokenInterface $token
     * @return array|mixed
     */
    protected function getUserByToken(AccessTokenInterface $token)
    {
        $response = $this->getHttpClient()->get('https://api.line.me/v2/profile', [
            'headers' => [
                'Accept' => 'application/json',
                'Authorization' => 'Bearer '.$token->getToken(),
            ],
        ]);
        $user = json_decode($response->getBody(), true);
        if (!empty($this->idToken)) {
            $data = explode('.', $this->idToken);
            $payload = json_decode(base64_decode($data[1]), true);
            if (isset($payload['name'])) {
                $user['name'] = $payload['name'];
            }
            if (isset($payload['picture'])) {
                $user['avatar'] = $payload['picture'];
            }

            if (isset($payload['email'])) {
                $user['email'] = $payload['email'];
            }
        }

        return $user;
    }

    /**
     * @param array $user
     * @return User
     */
    protected function mapUserToObject(array $user)
    {
        return new User([
            'id' => $this->arrayItem($user, 'userId'),
            'username' => $this->arrayItem($user, 'displayName'),
            'nickname' => $this->arrayItem($user, 'displayName'),
            'name' => $this->arrayItem($user, 'name'),
            'email' => $this->arrayItem($user, 'email'),
            'avatar' => $this->arrayItem($user, 'pictureUrl'),
        ]);
    }
}